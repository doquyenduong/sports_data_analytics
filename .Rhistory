geom_text(aes(label = matches_played, y = matches_played),
size = 3, hjust = 0.6, vjust = -0.8) +
geom_point(aes(y = qualified_teams), size = 4, color = "#e1856e") +
geom_text(aes(label = qualified_teams, y = qualified_teams),
size = 3, hjust = 0.6, vjust = 2) +
geom_line(aes(x = as.factor(year), y = qualified_teams),
group = 1, size = 1.5, alpha = 0.8, color = "#e1856e") +
my_theme_general +
theme(panel.grid.major.x = element_blank())
# Chunk 8: played-matches-qualified-teams-way2
# Compare matches played vs qualified team over the years
## Way 2: Two line charts
### Create a data frame of long format for matches and teams
d_matches_played_qualified_team <- cups %>%
select(year, matches_played, qualified_teams) %>%
pivot_longer(-year,
names_to = "matches_teams",
values_to = "value")
### Two line charts
d_matches_played_qualified_team %>%
ggplot(aes(x = as.factor(year), y = value,
group = matches_teams,
color = matches_teams,
shape = matches_teams)) +
geom_line(size = 1.5, alpha = 0.6) +
geom_point(size = 4.5) +
geom_text(aes(label = value, y = value),
color = "#495057", size = 3, hjust = 1, vjust = -2) +
scale_color_manual(values = c("#e1856e", "#57a896")) +
labs(x = "year", y = "number") +
my_theme_general +
theme(legend.title = element_blank(),
panel.grid.minor.y = element_line(linetype = "dashed"))
# Chunk 9: total-goals-vs-average-goals
# Create a new column for average goals
cups <- cups %>%
mutate(average_goals = goals_scored / matches_played)
# Total vs average goals by year
d_total_vs_average_goals <- cups %>%
select(year, goals_scored, average_goals) %>%
## To plot gglot 2 lines better
pivot_longer(-year,
names_to = "total_vs_average_goals",
values_to = "value")
# Two lines in one plot to compare
plot_toal_average_goals <- d_total_vs_average_goals %>%
ggplot(aes(x = year, y = value,
group = total_vs_average_goals,
color = total_vs_average_goals)) +
geom_line(size = 1.5) +
geom_point(size = 4.5) +
scale_x_continuous(breaks = seq(1930, 2014, 4)) +
scale_y_continuous(limits = c(0, 180)) +
scale_color_manual(values = c("#bd4d4f", "#57a896")) +
my_theme_general +
theme(legend.title = element_blank(),
panel.grid.minor.y = element_line(linetype = "dashed"))
plot_toal_average_goals
# Chunk 10: cups-podium-dataframe
# Winner, runner-up, third & fourth
d_winner <- cups %>%
count(winner, sort = TRUE) %>%
rename(country = winner,
n_winner = n)
d_runners_up <- cups %>%
count(runners_up, sort = TRUE) %>%
rename(country = runners_up,
n_runners_up = n)
d_third <- cups %>%
count(third, sort = TRUE) %>%
rename(country = third,
n_third = n)
d_fourth <- cups %>%
count(fourth, sort = TRUE) %>%
rename(country = fourth,
n_fourth = n)
# Full join data frame together
d_semi_final_country <- d_winner %>%
full_join(d_runners_up, by = "country") %>%
full_join(d_third, by = "country") %>%
full_join(d_fourth, by = "country") %>%
## Pivot long
pivot_longer(cols = c(n_winner, n_runners_up, n_third, n_fourth)) %>%
## Mutate NA to 0
mutate(value = ifelse(is.na(value), 0, value)) %>%
rename(count = value,
position = name)
# Chunk 11: top-2-final-podium
# Extract winner and runners-up
d_top_2 <- d_semi_final_country %>%
filter(position %in% c("n_winner", "n_runners_up"))
# Sankey diagram top 2 countries
ggplot(as.data.frame(d_top_2),
aes(y = count, axis1 = country, axis2 = position)) +
geom_alluvium(aes(fill = position), width = 1/10) +
geom_stratum(width = 1/10, fill = "#006463", color = "white") +
geom_label(stat = "stratum", aes(label = after_stat(stratum))) +
scale_x_discrete(limits = c("country", "postition in final"),
expand = c(.05, .05)) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
ggtitle("Semi-final countries") +
my_blank_theme +
theme(panel.grid.major.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
# Chunk 12: wordcloud-podium
# Create a data frame to count times that each country in the semi-final
d_podium_wordcloud <- d_winner %>%
full_join(d_runners_up, by = "country") %>%
full_join(d_third, by = "country") %>%
full_join(d_fourth, by = "country") %>%
mutate_all(~replace(., is.na(.), 0)) %>%
mutate(total = n_winner + n_runners_up + n_third + n_fourth)
# Word cloud showing nation name by the times in the semi-final
wordcloud(words = d_podium_wordcloud$country,
freq = d_podium_wordcloud$total,
min.freq = 1,
random.order = FALSE,
scale=c(8,.2),
colors = brewer.pal(8, "Dark2"))
# Chunk 13: wordcloud2-podium
# Word cloud 2
# d_podium_wordcloud %>%
#   select(country, total) %>%
#   wordcloud2(color='random-dark', shuffle = FALSE)
# Chunk 14: stack-bar-semi-finals
# Stack bar chart semi-finals
ggplot(d_semi_final_country, aes(x = reorder(country, count),
y = count, fill = position)) +
geom_col(position = position_stack(), width = 0.7) +
geom_text(aes(label = ifelse(count == 0, "", count)),
position = position_stack(vjust = 0.5),
color = "white", size = 3) +
labs(x = "country") +
coord_flip() +
scale_fill_manual(values = c('#30867b', '#83cab8', '#e1856e', '#bd4d4f')) +
my_theme_bar_chart
# Chunk 15: glimpse-matches
glimpse(matches)
# Chunk 16: prepare-data-matches
# Clean the column names
matches <- matches %>%
clean_names()
# Separate datetime to 2 columns: date and time
matches <- matches %>%
separate(datetime, into = c("date", "time"), sep = "-") %>%
## There is space before and after the chr, str_trim remove space
mutate(date = str_trim(date),
time = str_trim(time))
# Make the date column become date format
matches <- matches %>%
## Change some June and Jul to same month format
mutate(date = str_replace_all(date, c("June" = "Jun",
"July" = "Jul")),
date = parse_date(date, format = "%d %b %Y"))
# Make the time column become time format
matches <- matches %>%
mutate(time = parse_time(time))
# Remove unicode replacement character from attendance
matches <- matches %>%
## Convert a character vector between encodings
mutate(stadium = iconv(stadium, mark = FALSE, sub = "<U+xxxx>")) %>%
## "<U+xxxx>" become "¿½" -> Remove
mutate(stadium = str_replace_all(stadium, "ï¿½", "a"))
# library(stringi)
# test <- matches %>%
#   ## Convert a character vector between encodings
#   mutate(stadium = str_replace_all(stadium,"\\<U[^\\>]*\\>",""))
#   ## "<U+xxxx>" become "¿½" -> Remove
#   #mutate(stadium = str_remove_all(stadium, "¿½"))
# unique(test$stadium)
# Remove rn\"> in the home_team_name and away_team_name
matches <- matches %>%
mutate(home_team_name = str_remove(home_team_name, "rn\">"),
away_team_name = str_remove(away_team_name, "rn\">"))
# Change "Germany FR" and "German DR" to "Germany"
matches <- matches %>%
mutate(
home_team_name = case_when(
home_team_name %in% c("German DR", "Germany FR") ~ "Germany",
TRUE ~ home_team_name),
away_team_name = case_when(
away_team_name %in% c("German DR", "Germany FR") ~ "Germany",
TRUE ~ away_team_name),
)
# Chunk 17: summary-statistics-matches
# Overview summary statistics of the dataframe matches
summary(matches)
# Chunk 18: corr-matrix
# overview correlation matrix of all numerical variables
d_matches_numerical <- matches[, sapply(matches, is.numeric)]
chart.Correlation(d_matches_numerical, histogram = TRUE, pch = 19)
# Chunk 19: matches-stadium-city-attendance
##### Top 20 matches attendances
d_matches_top20_attendances <- matches %>%
select(year, stadium, home_team_name, away_team_name, attendance) %>%
mutate(team = paste0(home_team_name, " vs ", away_team_name, " ", year)) %>%
top_n(20, attendance)
# Flip bar chart top 20 matches attendances
d_matches_top20_attendances %>%
ggplot(aes(x = reorder(team, attendance), y = attendance,
fill = stadium)) +
geom_col(width = 0.85) +
geom_text(aes(label = attendance),
vjust = 0.5, hjust = -0.5, size = 2.5, color = "#343a40") +
coord_flip() +
labs(y = "attendance per match", x = "matches") +
scale_y_continuous(limits = c(0, 200000)) +
scale_fill_manual(values = c("#e1856e", "#30867b", "#bd4d4f")) +
my_theme_bar_chart +
theme(axis.title.x = element_text(hjust = 0.5))
# Chunk 20: matches-top20-attendance-per-city
# Top attendances per 20 cities
d_cities_top20_attendance <- matches %>%
select(year, city, attendance) %>%
group_by(city) %>%
mutate(max_attendance = max(attendance)) %>%
filter(attendance == max_attendance) %>%
arrange(desc(max_attendance)) %>%
ungroup() %>%
slice(1:30) %>%
distinct_all()
# Flip bar chart top attendances per 20 cities
d_cities_top20_attendance %>%
ggplot(aes(x = reorder(city, attendance), y = attendance)) +
geom_col(fill = "#30867b", width = 0.85) +
geom_text(aes(label = attendance),
vjust = 0.5, hjust = -0.5, size = 2.5, color = "#343a40") +
coord_flip() +
labs(y = "attendance per match", x = "matches") +
scale_y_continuous(limits = c(0, 200000)) +
my_theme_bar_chart
# Chunk 21: waffle-result-home-away-team
# Create a column "result" with home/away team won or draw
matches <- matches %>%
mutate(result = case_when(home_team_goals > away_team_goals ~ "home team won",
home_team_goals < away_team_goals ~ "away team won",
home_team_goals == away_team_goals ~ "draw",
TRUE ~ "unknown"))
d_home_away_team_won <- matches %>%
select(home_team_name, away_team_name, home_team_goals, away_team_goals, result)
# Create data frame to count home-away team won
d_count_home_away__won <- d_home_away_team_won %>%
count(result, sort = TRUE)
# Extract result, perc for waffle chart home-away team won
d_home_away_team_won_perc <- d_home_away_team_won %>%
count(result, sort = TRUE) %>%
mutate(perc = n/sum(n) * 100) %>%
select(result, perc)
# Waffle chart way 1 home-away team won
# ggplot(d_count_home_away__won, aes(fill = result, values = n)) +
#   geom_waffle(n_rows = 21, size = 0.33, colour = "white") +
#   scale_fill_manual(name = NULL,
#                     values = c("#bd4d4f", "#bce9e4", "#30867b"),
#                     labels = c("away team won 20.4%", "draw 22.3%",
#                                "home team won 57.3%" )) +
#   coord_equal() +
#   theme_void()
# Waffle chart way 2 home-away team won
waffle(d_home_away_team_won_perc, rows = 9,
colors = c("#bd4d4f", "#bce9e4", "#30867b"),
xlab = "home team won 57.3%, draw 22.3%, away team won 20.4%")
# Chunk 22: matches-home-away-team-won
# Stack bar chart normalized result home-away team won
ggplot(d_home_away_team_won_perc , aes(x="", y = perc, fill = result))+
geom_col(position = position_stack(), width = 0.5) +
scale_fill_manual(values=c("#bd4d4f", "#bce9e4", "#30867b")) +
geom_text(aes(y = perc, label = paste0(round(perc), "%")),
position = position_stack(vjust = 0.5),
size = 4, color = "white") +
scale_x_discrete(expand = expansion(add=c(0,0))) +
coord_flip() +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title.y = element_blank(),
legend.title = element_blank())
# Chunk 23: goal-ratio-home-away
# Home & away team goals in year
d_home_away_team_goals <- matches %>%
select(year, home_team_goals, away_team_goals) %>%
pivot_longer(cols = c(home_team_goals, away_team_goals))
# Stacked bar goal ratio
d_home_away_team_goals %>%
group_by(name) %>%
summarise(total = sum(value)) %>%
ungroup() %>%
mutate(perc = total/sum(total) * 100) %>%
ggplot(aes(x = "", y = perc, fill = name))+
geom_col(position = position_stack(),  width = 0.5) +
geom_text(aes(y = perc, label = paste0(round(perc), "%")),
position = position_stack(vjust = 0.5),
size = 4, color = "white") +
scale_fill_manual(values=c("#ee6c4d", "#30867b")) +
scale_x_discrete(expand = expansion(add=c(0,0))) +
coord_flip() +
theme_minimal() +
theme(panel.grid = element_blank(),
legend.title = element_blank(),
axis.title.y = element_blank())
# Chunk 24: jitter-plot
# Jitter plot away team vs home team goals color by year
d_home_away_team_goals %>%
ggplot(aes(x = name, y = value)) +
geom_boxplot() +
geom_jitter(aes(color = as.factor(year)),
alpha = 0.7, width = 0.15) +
labs(x = "team", y = "number of goals") +
scale_fill_brewer(type = "div", palette = "RdYlGn") +
my_theme_general +
theme() +
theme(panel.grid.major.x = element_blank())
# Chunk 25: density-plot
# Density plot home vs away team goals
## 2 plots in one
plot_density_home_away_goals <- d_home_away_team_goals %>%
ggplot(aes(x = value, color = name, fill = name)) +
geom_density(alpha = 0.5) +
# ggridges::geom_density_ridges() +
scale_fill_manual(values = c("#ee6c4d", "#30867b")) +
scale_color_manual(values = c("#ee6c4d", "#30867b")) +
labs(x = "number of goals", y = " ") +
my_theme_general +
theme(legend.title = element_blank())
## 3rd try 2 plots separately
plot_density_seperate_home_away_goals <- d_home_away_team_goals %>%
ggplot(aes(x = value, y = name, color = name, fill = name)) +
# geom_density(alpha = 0.7) +
ggridges::geom_density_ridges() +
scale_fill_manual(values = c("#ee6c4d", "#30867b")) +
scale_color_manual(values = c("#ee6c4d", "#30867b")) +
labs(x = "number of goals", y = " ") +
my_theme_general +
theme(legend.title = element_blank())
## Combine them together
grid.arrange(plot_density_home_away_goals,
plot_density_seperate_home_away_goals)
# Chunk 26: matches-home-away-team-goals-comparision
## Density home vs away goals by years
d_home_away_team_goals %>%
ggplot(aes(x = value, y = factor(year), color = name, fill = name)) +
# geom_vline(xintercept = 0.5, size = 0.75, color = "#737373") +
# stat_density_ridges(quantile_lines = TRUE, quantiles = 2) +
ggridges::geom_density_ridges(alpha = 0.9, scale = 1.5) +
scale_fill_manual(values = c("#ee6c4d", "#30867b")) +
scale_color_manual(values = c("#ee6c4d", "#30867b")) +
#scale_x_continuous(limits = c(0, 10))
labs(x = "number of goals", y = "year") +
my_theme_general +
theme(legend.title = element_blank())
# Chunk 27: matches-goals
# Make a dataframe with all countries and total goals per country
d_goals_per_country <- matches %>%
select(home_team_name, home_team_goals, away_team_name, away_team_goals) %>%
pivot_longer(cols = c(home_team_name, away_team_name)) %>%
## Group the countries
group_by(value) %>%
## Summarise across columns and rows to calculate goals per country
summarise(total_goals = sum(home_team_goals) + sum(away_team_goals)) %>%
ungroup() %>%
rename(country = value)
## Top 6 countries by goals
d_top_6_country_goals <- d_goals_per_country %>%
top_n(6, total_goals) %>%
arrange(-total_goals)
## Bar chart total goals by country
d_goals_per_country %>%
ggplot(aes(x = reorder(country, total_goals), y = total_goals)) +
geom_col(width = 0.5, fill = "#30867b") +
labs(x = "country", y = "goals") +
coord_flip() +
my_theme_general
# Chunk 28: heatmap-goals-country
# Make a dataframe goals per country per year
d_goals_per_country_per_year <- matches %>%
select(year, home_team_name, home_team_goals, away_team_name, away_team_goals) %>%
pivot_longer(cols = c(home_team_name, away_team_name)) %>%
## Group the countries
group_by(year, value) %>%
## Summarise across columns and rows to calculate goals per country
summarise(total_goals = sum(home_team_goals) + sum(away_team_goals)) %>%
ungroup() %>%
rename(country = value)
## Heat map goals per country per year
d_goals_per_country_per_year %>%
ggplot(aes(x = as.factor(year), y = country, fill = total_goals)) +
geom_tile(color = "white", lwd = 1, linetype = 1) +
coord_equal() +
scale_fill_gradientn(
breaks = seq(0, 50, 5),
colours = c('#006463', '#30867b', '#57a896', '#83cab8',
'#fbc09c', '#e1856e', '#bd4d4f', '#93003a'),
values = scales::rescale(seq(0, 800, 100))) +
my_theme_heat_map
# Chunk 29: top6-goals-nations
## How the top 6 countries with most goals over the years?
d_goals_per_country_per_year %>%
filter(country %in% d_top_6_country_goals$country) %>%
ggplot(aes(x = as.factor(year), y = total_goals, fill = country)) +
geom_col() +
scale_fill_manual(values = c('#006463', '#30867b', '#57a896',
'#83cab8', '#fbc09c', '#e1856e')) +
labs(x = "year", y = "total goals") +
my_theme_heat_map
# Dataframe goals per year
d_goals_per_year <- matches %>%
select(year, home_team_goals, away_team_goals) %>%
mutate(all_goals = home_team_goals + away_team_goals)
### Important to compare these 2 graphs
# Violin plot goals per year
d_goals_per_year %>%
ggplot(aes(as.factor(year), all_goals)) +
geom_violin(aes(fill = as.factor(year), color = as.factor(year)),
inherit.aes = TRUE, alpha = 0.9, scale = "count",
## To adjust the shape more precise
adjust = 0.65) +
stat_summary(fun = mean, shape = 22,
geom = "pointrange", fill = "red") +
geom_jitter(#aes(color = as.factor(year)),
shape = 16, size = 0.8, color = "#495057",
position=position_jitter(height = 0.1, width = 0.1)) +
scale_fill_manual(values = c('#006463', '#18716c', '#297f76', '#388c80',
'#479a8b', '#57a896', '#68b6a3', '#7ac3b0',
'#8dd0bf', '#a3ddd0', '#ffe6c2', '#fecca8',
'#f7b492', '#ed9c7e', '#e1856e', '#d46e60',
'#c55854', '#b5414a', '#a42842', '#93003a')) +
scale_color_manual(values = c('#006463', '#18716c', '#297f76', '#388c80',
'#479a8b', '#57a896', '#68b6a3', '#7ac3b0',
'#8dd0bf', '#a3ddd0', '#ffe6c2', '#fecca8',
'#f7b492', '#ed9c7e', '#e1856e', '#d46e60',
'#c55854', '#b5414a', '#a42842', '#93003a')) +
#geom_dotplot(binaxis='y', dotsize= 0.2) +
labs(x = "year", y = "total goals") +
my_theme_general +
theme(legend.title = element_blank())
### Important to compare these 2 graphs
# Violin plot goals per year
d_goals_per_year %>%
ggplot(aes(as.factor(year), all_goals)) +
geom_violin(aes(fill = as.factor(year), color = as.factor(year)),
inherit.aes = TRUE, alpha = 0.9, scale = "area",
## To adjust the shape more precise
adjust = 0.65) +
stat_summary(fun = mean, shape = 22,
geom = "pointrange", fill = "red") +
geom_jitter(#aes(color = as.factor(year)),
shape = 16, size = 0.8, color = "#495057",
position=position_jitter(height = 0.1, width = 0.1)) +
scale_fill_manual(values = c('#006463', '#18716c', '#297f76', '#388c80',
'#479a8b', '#57a896', '#68b6a3', '#7ac3b0',
'#8dd0bf', '#a3ddd0', '#ffe6c2', '#fecca8',
'#f7b492', '#ed9c7e', '#e1856e', '#d46e60',
'#c55854', '#b5414a', '#a42842', '#93003a')) +
scale_color_manual(values = c('#006463', '#18716c', '#297f76', '#388c80',
'#479a8b', '#57a896', '#68b6a3', '#7ac3b0',
'#8dd0bf', '#a3ddd0', '#ffe6c2', '#fecca8',
'#f7b492', '#ed9c7e', '#e1856e', '#d46e60',
'#c55854', '#b5414a', '#a42842', '#93003a')) +
#geom_dotplot(binaxis='y', dotsize= 0.2) +
labs(x = "year", y = "total goals") +
my_theme_general +
theme(legend.title = element_blank())
### Important to compare these 2 graphs
# Violin plot goals per year
d_goals_per_year %>%
ggplot(aes(as.factor(year), all_goals)) +
geom_violin(aes(fill = as.factor(year), color = as.factor(year)),
inherit.aes = TRUE, alpha = 0.9,
## To adjust the shape more precise
adjust = 0.65) +
stat_summary(fun = mean, shape = 22,
geom = "pointrange", fill = "red") +
geom_jitter(#aes(color = as.factor(year)),
shape = 16, size = 0.8, color = "#495057",
position=position_jitter(height = 0.1, width = 0.1)) +
scale_fill_manual(values = c('#006463', '#18716c', '#297f76', '#388c80',
'#479a8b', '#57a896', '#68b6a3', '#7ac3b0',
'#8dd0bf', '#a3ddd0', '#ffe6c2', '#fecca8',
'#f7b492', '#ed9c7e', '#e1856e', '#d46e60',
'#c55854', '#b5414a', '#a42842', '#93003a')) +
scale_color_manual(values = c('#006463', '#18716c', '#297f76', '#388c80',
'#479a8b', '#57a896', '#68b6a3', '#7ac3b0',
'#8dd0bf', '#a3ddd0', '#ffe6c2', '#fecca8',
'#f7b492', '#ed9c7e', '#e1856e', '#d46e60',
'#c55854', '#b5414a', '#a42842', '#93003a')) +
#geom_dotplot(binaxis='y', dotsize= 0.2) +
labs(x = "year", y = "total goals") +
my_theme_general +
theme(legend.title = element_blank())
# Jitter plot away team vs home team goals color by year
d_home_away_team_goals %>%
ggplot(aes(x = name, y = value)) +
geom_boxplot() +
geom_jitter(aes(color = as.factor(year)),
alpha = 0.7, width = 0.15) +
labs(x = "team", y = "number of goals") +
scale_fill_brewer(type = "div", palette = "RdYlGn") +
my_theme_general +
theme() +
theme(panel.grid.major.x = element_blank())
## Heat map goals per country per year
d_goals_per_country_per_year %>%
ggplot(aes(x = as.factor(year), y = country, fill = total_goals)) +
geom_tile(color = "white", lwd = 1, linetype = 1) +
coord_equal() +
scale_fill_gradientn(
breaks = seq(0, 50, 5),
colours = c('#006463', '#30867b', '#57a896', '#83cab8',
'#fbc09c', '#e1856e', '#bd4d4f', '#93003a'),
values = scales::rescale(seq(0, 800, 100))) +
labs(x = "year") +
my_theme_heat_map
